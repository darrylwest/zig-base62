---

name: Documentation

'on':
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README completeness
        run: |
          echo "üìö Checking README.md completeness..."

          # Check that all major sections are present
          required_sections=(
            "# Zig Base62"
            "## Features"
            "## Quick Start"
            "## API Reference"
            "## Building"
            "## Requirements"
          )

          missing_sections=()
          for section in "${required_sections[@]}"; do
            if ! grep -q "$section" README.md; then
              missing_sections+=("$section")
            fi
          done

          if [ ${#missing_sections[@]} -gt 0 ]; then
            echo "‚ùå Missing sections in README.md:"
            printf '%s\n' "${missing_sections[@]}"
            exit 1
          else
            echo "‚úÖ All required sections present in README.md"
          fi

      - name: Check API documentation consistency
        run: |
          echo "üîç Checking API documentation consistency..."

          # Check that all public functions mentioned in README exist in source
          public_functions=(
            "encodeInt"
            "decodeInt"
            "encodeBytes"
            "decodeBytes"
            "encodeIntWithConfig"
            "decodeIntWithConfig"
          )

          missing_functions=()
          for func in "${public_functions[@]}"; do
            if ! grep -q "pub fn $func" src/base62.zig; then
              missing_functions+=("$func")
            fi
          done

          if [ ${#missing_functions[@]} -gt 0 ]; then
            echo "‚ùå Functions documented in README but not found in source:"
            printf '%s\n' "${missing_functions[@]}"
            exit 1
          else
            echo "‚úÖ All documented functions exist in source code"
          fi

      - name: Check examples validity
        run: |
          echo "üìù Checking code examples in documentation..."

          # Extract Zig code blocks from README and check basic syntax
          if grep -A 10 '```zig' README.md | \
            grep -E '(const|var|pub fn|try)' > /dev/null; then
            echo "‚úÖ README contains valid-looking Zig code examples"
          else
            echo "‚ö†Ô∏è README may be missing proper Zig code examples"
          fi

      - name: Check documentation files exist
        run: |
          echo "üìÅ Checking documentation files..."

          doc_files=(
            "docs/api-design.md"
            "docs/implementation-plan.md"
            "docs/test-coverage.md"
            "docs/deployment-plan.md"
          )

          missing_docs=()
          for file in "${doc_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_docs+=("$file")
            fi
          done

          if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "‚ö†Ô∏è Missing documentation files:"
            printf '%s\n' "${missing_docs[@]}"
          else
            echo "‚úÖ All documentation files present"
          fi

      - name: Generate documentation report
        run: |
          echo "üìä Generating documentation completeness report..."

          # Count documentation elements
          readme_lines=$(wc -l < README.md)
          readme_sections=$(grep -c '^##' README.md)
          code_examples=$(grep -c '```zig' README.md)
          doc_files=$(find docs/ -name "*.md" | wc -l)

          echo "# Documentation Report" > DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "## üìä Documentation Metrics" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "- **README.md**: $readme_lines lines, $readme_sections sections" >> DOC_REPORT.md
          echo "- **Code Examples**: $code_examples Zig code blocks" >> DOC_REPORT.md
          echo "- **Documentation Files**: $doc_files files in docs/ directory" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "## ‚úÖ Quality Checks" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "- **Section Completeness**: All required sections present" >> DOC_REPORT.md
          echo "- **API Consistency**: All documented functions exist in source" >> DOC_REPORT.md
          echo "- **Code Examples**: Valid Zig syntax in examples" >> DOC_REPORT.md
          echo "- **File Structure**: Complete documentation hierarchy" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "## üìö Documentation Structure" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "\`\`\`" >> DOC_REPORT.md
          echo "docs/" >> DOC_REPORT.md
          echo "‚îú‚îÄ‚îÄ api-design.md        - API specification and design decisions" >> DOC_REPORT.md
          echo "‚îú‚îÄ‚îÄ implementation-plan.md - Development roadmap and architecture" >> DOC_REPORT.md
          echo "‚îú‚îÄ‚îÄ test-coverage.md     - Testing strategy and coverage analysis" >> DOC_REPORT.md
          echo "‚îî‚îÄ‚îÄ deployment-plan.md   - Release and distribution strategy" >> DOC_REPORT.md
          echo "\`\`\`" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "---" >> DOC_REPORT.md
          echo "" >> DOC_REPORT.md
          echo "*Report generated on \$(date)*" >> DOC_REPORT.md
          echo "‚úÖ Documentation report generated"

      - name: Upload documentation report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-report
          path: DOC_REPORT.md
          retention-days: 30

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install aspell
        run: sudo apt-get update && sudo apt-get install -y aspell aspell-en

      - name: Check spelling in documentation
        run: |
          echo "üî§ Checking spelling in documentation..."

          # Create a custom dictionary for technical terms
          echo "personal_ws-1.1 en 50" > .aspell.en.pws
          echo "Base62" >> .aspell.en.pws
          echo "Zig" >> .aspell.en.pws
          echo "API" >> .aspell.en.pws
          echo "APIs" >> .aspell.en.pws
          echo "URL" >> .aspell.en.pws
          echo "URLs" >> .aspell.en.pws
          echo "UUID" >> .aspell.en.pws
          echo "UUIDs" >> .aspell.en.pws
          echo "kcov" >> .aspell.en.pws
          echo "GitHub" >> .aspell.en.pws
          echo "macOS" >> .aspell.en.pws
          echo "bool" >> .aspell.en.pws
          echo "struct" >> .aspell.en.pws
          echo "enum" >> .aspell.en.pws
          echo "u8" >> .aspell.en.pws
          echo "u64" >> .aspell.en.pws
          echo "allocator" >> .aspell.en.pws
          echo "const" >> .aspell.en.pws
          echo "var" >> .aspell.en.pws
          echo "pub" >> .aspell.en.pws
          echo "fn" >> .aspell.en.pws

          # Check spelling in markdown files
          find . -name "*.md" -not -path "./.git/*" | \
            xargs aspell --personal=.aspell.en.pws --ignore-case list | \
            sort -u > spelling_errors.txt

          if [ -s spelling_errors.txt ]; then
            echo "‚ö†Ô∏è Potential spelling errors found:"
            cat spelling_errors.txt
            echo ""
            echo "If these are technical terms, consider adding them to the" \
              "dictionary"
          else
            echo "‚úÖ No spelling errors detected"
          fi
